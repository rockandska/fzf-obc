#!/usr/bin/env bash

__fzf_obc::config::get::triggers() {
	if [ "${#@}" -lt 1 ];then
		__fzf_obc::log::error 'At least one argument is requiered' 'Usage :' "${FUNCNAME[0]}	VAR_TO_RETURN"
		return 1
	fi
	local var2return="${1:-}"
	local t=(
		std
		mlt
		rec
	)
	local i
	for ((i=0; i<${#t[@]}; ++i));do
		# shellcheck disable=SC1087
		read -r "$var2return[$i]" <<< "${t[$i]}"
	done
}

__fzf_obc::config::get::options() {
	if [ "${#@}" -lt 1 ];then
		__fzf_obc::log::error 'At least one argument is requiered' 'Usage :' "${FUNCNAME[0]}	VAR_TO_RETURN"
		return 1
	fi
	local var2return="${1:-}"
	local o=(
		enable
		fzf_trigger
		fzf_multi
		fzf_opts
		fzf_binds
		fzf_height
		fzf_colors
		sort_opts
	)
	local i
	for ((i=0; i<${#o[@]}; ++i));do
		# shellcheck disable=SC1087
		read -r "$var2return[$i]" <<< "${o[$i]}"
	done
}

__fzf_obc::config::get::default_config() {
	if [ "${#@}" -lt 1 ];then
		__fzf_obc::log::error 'At least one argument is requiered' 'Usage :' "${FUNCNAME[0]}	VAR_TO_RETURN"
		return 1
	fi
	local var2return="${1:-}"
	read -r -d '' "${var2return}" <<- 'DEFAULT_CONF' || true
	[DEFAULT]
	std_enable=1
	mlt_enable=1
	rec_enable=1
	
	std_fzf_trigger=''
	mlt_fzf_trigger='*'
	rec_fzf_trigger='**'

	std_fzf_multi=0
	mlt_fzf_multi=1
	rec_fzf_multi=1

	std_fzf_opts=('--select-1' '--exit-0' '--no-sort')
	mlt_fzf_opts=('--select-1' '--exit-0' '--no-sort')
	rec_fzf_opts=('--select-1' '--exit-0' '--no-sort')

	std_fzf_binds=('--bind' 'tab:accept')
	mlt_fzf_binds=('--bind' 'tab:toggle+down;shift-tab:toggle+up')
	if ((rec_fzf_multi));then
		rec_fzf_binds=("${mlt_fzf_binds[@]:-}")
	else
		rec_fzf_binds=("${std_fzf_binds[@]:-}")
	fi

	std_fzf_height=('--height' '40%')
	mlt_fzf_height=("${std_fzf_height[@]:-}")
	rec_fzf_height=("${std_fzf_height[@]:-}")

	std_fzf_colors=('--color' 'border:15')
	mlt_fzf_colors=("${std_fzf_colors[@]:-}")
	rec_fzf_colors=("${std_fzf_colors[@]:-}")

	std_sort_opts=()
	mlt_sort_opts=("${std_sort_opts[@]:-}")
	rec_sort_opts=("${std_sort_opts[@]:-}")

	DEFAULT_CONF
}

__fzf_obc::config::print::ini_config() {
	# Get fzf-obc.ini from multiples directories and print a merge of them
	# $@ : directories config to lookup
	if [ "${#@}" -lt 1 ];then
		__fzf_obc::log::error 'At least one argument is requiered' 'Usage :' "${FUNCNAME[0]}	DIRECTORIES..."
		return 1
	fi
	local ini_config
	# Add default ini
	__fzf_obc::config::get::default_config ini_config
	ini_config+=$'\n'
	local dir
	for dir in "$@";do
		if [ -r "${dir}/fzf-obc.ini" ];then
			__fzf_obc::log::debug "Found 'fzf-obc.ini' in '${dir}'"
			ini_config+=$(<"${dir}/fzf-obc.ini")
			ini_config+=$'\n'
		fi
	done

	# Get unique sections list
	local sections
	IFS=$'\n' read -r -d '' -a sections < <(
		# shellcheck disable=SC2016
		echo "${ini_config}" \
			| sed -r -n -e '/^\s*\[([a-zA-Z:-]+)\]\s*$/{ s/\[|\]//gp }' \
			| LC_ALL=C sort -u
		printf '\0'
	)
	local section
	for section in "${sections[@]}";do
		echo "[$section]"
		echo "${ini_config}" | sed -n -r "/^\s*\[$section\]\s*$/,/^\s*\[(.*)\]\s*$/{ /^\s*\[$section\]\s*$/{p;n}; /^\s*\[(.*)\]\s*$/!p }" | sed -r '/^\s*\[(.*)\]\s*$/d'
	done
}

__fzf_obc::config::print::cfg_func() {
	# will print a function definition containing all configuration case
	# present in the directories defined as parameter
	if [ "${#@}" -eq 0 ];then
		1>&2 echo 'At least one directory where to search configuration is required'
		return 1
	fi
	# shellcheck disable=SC2016
	{
	declare -f __fzf_obc::config::get::wrapper | sed -e '/case "${cfg_level}" in/q' | sed 's/__fzf_obc::config::get::wrapper/__fzf_obc::config::get/'
	# Turn ini section into bash case statements
	__fzf_obc::config::print::ini_config "$@" |  sed -e 's/^\s*\[/;;\n/;s/\]\s*$/\)/' -e '${s/$/\n;;/}' | sed -e '/;;/ {s///; ' -e ':a' -e '$!{n;ba' -e '};}'
	declare -f __fzf_obc::config::get::wrapper | sed -e '1,/case "${cfg_level}"/ d'
	}
}

__fzf_obc::config::get::create() {
	# Create __fzf_obc::config::get from __fzf_obc::config::get::wrapper
	# with configuration files present in the directories defined as parameter
	if [ "${#@}" -eq 0 ];then
		1>&2 echo 'At least one directory where to search configuration is required'
		return 1
	fi
	local tmp
	tmp="$(__fzf_obc::config::print::cfg_func "$@")"
	# shellcheck disable=SC1091
	source /dev/stdin <<-CFG_GET_DEF
	$tmp
	CFG_GET_DEF
}

__fzf_obc::config::get() {
	# will be generated by __fzf_obc::config::get::create
	# from __fzf_obc::config::get::wrapper
	:
}

__fzf_obc::config::get::wrapper() {
	# __fzf_obc_cfg_get [trigger] [option] [cmd]
	# __fzf_obc_cfg_get std fzf_trigger kill
	local prefix="${1:-}"
	local trigger="${2:-}"
	local option="${3:-}"
	local cmd="${4:-}"
	local option2display="${trigger:-}_${option:-}"
	local enable_option="${trigger:-}_enable"
	local var2return="${prefix:-}_${option:-}"
	eval "${var2return}=()"

	if [ "${#@}" -eq 0 ];then
		__fzf_obc::log::error "__fzf_obc_cfg_get PREFIX TRIGGER OPTION [cmd]"
		return 1
	fi
	if [ -z "${prefix}" ];then
		__fzf_obc::log::error "Missing 'prefix' parameter"
		return 1
	fi
	if [ -z "${trigger}" ];then
		__fzf_obc::log::error "Missing 'trigger' parameter"
		return 1
	fi
	if [ -z "${option}" ];then
		__fzf_obc::log::error "Missing 'option' parameter"
		return 1
	fi

	local triggers_arr
	__fzf_obc::config::get::triggers triggers_arr

	local options_arr=()
	__fzf_obc::config::get::options options_arr

	# loop to declare all variables as local
	# local [trigger]_[option]
	local x y
	for x in "${triggers_arr[@]}";do
		for y in "${options_arr[@]}";do
			eval "local ${x}_${y}="
		done
	done

	if [ -z "${!option2display+x}" ];then
		__fzf_obc::log::error "Unknown option '${option2display}'"
		return 1
	fi

	# Define loading order (lower first)
	local cfg2test
	cfg2test=("DEFAULT")
	if [ -n "${cmd:-}" ];then
		cfg2test+=("${cmd:-}")
	fi

	local cfg_level
	for cfg_level in "${cfg2test[@]}";do
		case "${cfg_level}" in

		# configuration variables
		# coming from __fzf_obc::config::print::ini_config

		esac

		if [ "${FZF_OBC_DISABLE:-0}" -eq 0 ] && [ "${!enable_option}" -eq 1 ];then
			# shellcheck disable=SC1087,SC2034
			local tmpvar="${option2display}[@]"
			local i=0
			local v
			for v in "${!tmpvar+${!tmpvar}}";do
				read -r "${prefix}_${option}[i++]" <<< "${v}"
			done
		else
			printf -v "${enable_option}" '%s\n' "0"
			break
		fi

	done
}
